{"version":3,"sources":["logo.svg","components/header.js","App.js","serviceWorker.js","index.js","images/ls.png"],"names":["module","exports","Header","React","Component","render","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","src","ls","style","width","align","App","constructor","props","super","createCustomInsertButton","onClick","color","this","update","state","data","deneme","english","turkish","polish","spanish","sentences","openPopupbox","bind","postData","createRef","content","type","ref","onChange","placeholder","PopupboxManager","open","event","setState","current","value","componentDidMount","fetchData","console","log","fetch","then","response","json","catch","error","method","headers","body","JSON","stringify","popupboxConfig","titleBar","enable","text","fadeIn","fadeInSpeed","options","insertBtn","search","insertRow","exportCSV","scrollTop","tableStyle","border","containerStyle","headerStyle","bodyStyle","dataField","isKey","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec9b72b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button, Input, Row, Container, Col } from 'react-bootstrap'\r\nimport ls from '../images/ls.png'\r\nclass Header extends React.Component {\r\n   render() {\r\n      return (\r\n\r\n         <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">Language Support</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n               <Nav className=\"mr-auto\">\r\n                  <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                  <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                  <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                     <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                     <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                     <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                     <NavDropdown.Divider />\r\n                     <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                  </NavDropdown>\r\n               </Nav>\r\n\r\n               <img src={ls} style={{ width: '3.5rem', align: 'right' }} />\r\n\r\n            </Navbar.Collapse>\r\n         </Navbar>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { BootstrapTable, TableHeaderColumn,InsertButton } from 'react-bootstrap-table';\r\nimport Header from './components/header'\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nimport logo from './logo.svg';\r\nimport {\r\n  PopupboxManager,\r\n  PopupboxContainer\r\n} from 'react-popupbox';\r\nimport './react-popupbox.css'\r\nimport './App.css';\r\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table';\r\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table.min.js';\r\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table.min.js';\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      deneme: false,\r\n      english: \"\",\r\n      turkish: \"\",\r\n      polish: \"\",\r\n      spanish: \"\",\r\n      sentences: \"\"\r\n\r\n      // redirect: false\r\n    };\r\n    this.openPopupbox = this.openPopupbox.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.postData = this.postData.bind(this);\r\n    this.english = React.createRef();\r\n    this.turkish = React.createRef();\r\n    this.polish = React.createRef();\r\n    this.spanish = React.createRef();\r\n    this.sentences = React.createRef();\r\n    \r\n\r\n\r\n\r\n  };\r\n  update() {\r\n    const content = (\r\n      <div>\r\n        <input className=\"quotes\" type=\"text\" ref={this.english} onChange={this.openPopupbox} placeholder=\"English\"></input>\r\n        <input className=\"quotes\" type=\"text\" ref={this.turkish} onChange={this.openPopupbox} placeholder=\"Turkish\"></input>\r\n        <input className=\"quotes\" type=\"text\" ref={this.polish} onChange={this.openPopupbox} placeholder=\"Polish\"></input>\r\n        <input className=\"quotes\" type=\"text\" ref={this.spanish} onChange={this.openPopupbox} placeholder=\"Spanish\"></input>\r\n        {/* <input className=\"quotes\" type=\"text\" ref={this.sentences}  onChange={this.openPopupbox} placeholder=\"Sentences\"></input> */}\r\n        <button className=\"quotes\" onClick={this.postData} type=\"submit\">Save</button>\r\n      </div>\r\n    )\r\n    PopupboxManager.open({ content })\r\n  }\r\n  openPopupbox(event) {\r\n    this.setState({\r\n      english: this.english.current.value,\r\n      turkish: this.turkish.current.value,\r\n      polish: this.polish.current.value,\r\n      spanish: this.spanish.current.value\r\n\r\n    });\r\n\r\n  }\r\n  createCustomInsertButton = (onClick) => {\r\n    return (\r\n      <button style={{ color: 'red' }} onClick={this.update}>Add rows</button>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.fetchData();\r\n    this.setState({ deneme: true }, function () {\r\n      console.log(this.state.deneme);\r\n    });\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData() {\r\n    fetch('https://language-support.herokuapp.com/api')\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        console.log(json)\r\n        this.setState({\r\n          data: json,\r\n          deneme: true\r\n        }, function () {\r\n          console.log(this.state.data);\r\n        })\r\n      })\r\n      .catch(error => console.log('parsing failder', error))\r\n\r\n  }\r\n\r\n  postData() {\r\n    console.log(this.state.turkish)\r\n    console.log(this.state.english)\r\n\r\n    fetch(`https://language-support.herokuapp.com/api/ekle`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        english: this.state.english,\r\n        turkish: this.state.turkish,\r\n        polish: this.state.polish,\r\n        spanish: this.state.spanish,\r\n        sentences: this.state.sentences\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const popupboxConfig = {\r\n      titleBar: {\r\n        enable: true,\r\n        text: 'Adding New Word'\r\n      },\r\n      fadeIn: true,\r\n      fadeInSpeed: 500\r\n    }\r\n   \r\n    const options = {\r\n      insertBtn: this.createCustomInsertButton\r\n    };\r\n\r\n      return (\r\n\r\n      <div style={{ width: 'auto' }}>\r\n        <Header />\r\n        \r\n        <PopupboxContainer{...popupboxConfig}></PopupboxContainer>\r\n        <BootstrapTable search insertRow exportCSV data={this.state.data} scrollTop={'Bottom'}\r\n          options={options}\r\n          tableStyle={{ border: '#0000FF 2.5px solid' }}\r\n          containerStyle={{ border: '#FFBB73 2.5px solid' }}\r\n          headerStyle={{ border: 'red 1px solid' }}\r\n          bodyStyle={{ border: 'green 1px solid' }}\r\n        >\r\n\r\n          <TableHeaderColumn width='150' dataField='english' isKey>ENGLISH</TableHeaderColumn>\r\n          <TableHeaderColumn width='150' dataField='turkish'>TURKISH</TableHeaderColumn>\r\n          <TableHeaderColumn width='150' dataField='polish'>POLISH </TableHeaderColumn>\r\n          <TableHeaderColumn width='150' dataField='spanish'>SPANISH </TableHeaderColumn>\r\n          {/* <TableHeaderColumn width='150' dataField='sentences'>SENTENCES</TableHeaderColumn> */}\r\n        </BootstrapTable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/ls.61d4dcbc.png\";"],"sourceRoot":""}